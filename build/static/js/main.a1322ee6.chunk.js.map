{"version":3,"sources":["components/AppHomeLink/AppHomeLink.jsx","components/AppNavigation/AppNavigation.jsx","components/AppHeader/AppHeader.jsx","components/BeverageItem/BeverageItem.jsx","components/BeverageList/BeverageList.jsx","components/AppMain/AppMain.jsx","components/GoToTop/GoToTop.jsx","App/App.js","index.js"],"names":["AppHomeLink","wrapperProps","WrapperComponent","as","wrapperClassName","className","restWrapperProps","external","children","domProps","combineClassNames","classNames","combineWrapperClassNames","target","rel","defaultProps","AppNavigation","state","isOpen","classes","handleOpenMeun","e","setState","window","setTimeout","handleClopseMeun","type","title","aria-label","onClick","this","hidden","href","aria-hidden","Component","AppHeader","lang","BeverageItem","role","aria-haspopup","aria-pressed","src","width","height","alt","aria-modal","aria-labelledby","id","BeverageList","AppMain","GoToTop","viewBox","xmlns","d","App","props","ReactDOM","render","document","getElementById","then","serviceWorker","register"],"mappings":"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","file":"static/js/main.a1322ee6.chunk.js","sourcesContent":["import \"./AppHomeLink.scss\";\r\nimport React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { string } from \"prop-types\";\r\n\r\n// [비표준 DOM 속성 방법]\r\n// : external, children 을 제외한 표준 DOM속성(domProps)를 bind 한다.\r\n\r\n// [외부에서 전달 받은 랩퍼 속성을 별칭 등록해서 사용하는 방법]\r\nconst AppHomeLink = ({\r\n  wrapperProps: {\r\n    as: WrapperComponent,\r\n    className: wrapperClassName,\r\n    ...restWrapperProps\r\n  },\r\n  external,\r\n  children,\r\n  className,\r\n  ...domProps\r\n}) => {\r\n  // [외부로 전달된 className 병합 방법]\r\n  // const combineClassNames = [\"appHeader__homeLink\", className || \"\"]\r\n  //   .join(\" \")\r\n  //   .trim();\r\n\r\n  // [classnames 라이브러리 방법]\r\n  const combineClassNames = classNames(\"appHeader__homeLink\", className);\r\n\r\n  // [특정 요소 속성을 원하는 특정 랩퍼에 사용하는 방법]\r\n  const combineWrapperClassNames = classNames(\r\n    \"appHeader__brand\",\r\n    wrapperClassName || \"\"\r\n  );\r\n\r\n  return (\r\n    <WrapperComponent\r\n      {...restWrapperProps}\r\n      className={combineWrapperClassNames}\r\n    >\r\n      <a\r\n        {...domProps}\r\n        className={combineClassNames}\r\n        target={external ? \"_blank\" : null}\r\n        rel={external ? \"noopener noreferrer\" : null}\r\n      >\r\n        {children || <span className=\"=a11yHidden\">HOME LINK</span>}\r\n      </a>\r\n    </WrapperComponent>\r\n  );\r\n};\r\n\r\nAppHomeLink.propTypes = {\r\n  href: string.isRequired,\r\n};\r\n\r\n// [AppHomeLink에 wrapperProps 속성 기본 설정]\r\nAppHomeLink.defaultProps = {\r\n  wrapperProps: {\r\n    as: \"h1\",\r\n  },\r\n};\r\n\r\nexport default AppHomeLink;\r\n","import \"./AppNavigation.scss\";\r\nimport React, { Fragment, Component } from \"react\";\r\n\r\n// [hidden 속성을 사용하는 이유]\r\n// 키보드 사용자의 경우 접근성 관점에서 해당 메뉴를 열지 않으면\r\n// 다음으 컨텐츠를 탐색할 거라 생각할 수도 있다.\r\n// 하지만 hideen 속성을 사용하지 시각적으로 보이지 않는 부분까지 탐색된다.\r\n\r\nclass AppNavigation extends Component {\r\n  state = {\r\n    isOpen: false,\r\n    classes: \"appNavigation\",\r\n  };\r\n  // callback 함수를 통해서 open 값이 변경된 이후에\r\n  handleOpenMeun = (e) => {\r\n    this.setState({ isOpen: true }, () => {\r\n      window.setTimeout(() => {\r\n        this.setState({\r\n          classes: \"appNavigation is-active\",\r\n        });\r\n      }, 100);\r\n    });\r\n  };\r\n  handleClopseMeun = (e) => {\r\n    this.setState({ classes: \"appNavigation\" }, () => {\r\n      window.setTimeout(() => {\r\n        this.setState({ isOpen: false });\r\n      }, 400);\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <button\r\n          className=\"resetButton is-open-menu\"\r\n          type=\"button\"\r\n          title=\"메뉴 열기\"\r\n          aria-label=\"메뉴 열기\"\r\n          onClick={this.handleOpenMeun}\r\n        >\r\n          <span className=\"ir\"></span>\r\n        </button>\r\n        <nav className={this.state.classes} hidden={!this.state.isOpen}>\r\n          <h2 className=\"a11yHidden\">메인 메뉴</h2>\r\n          <ul className=\"resetBoxModel\">\r\n            <li>\r\n              <a href=\"#menu\">메뉴</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#members\">이디야멤버스</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#coffee-lab\">이디야커피랩</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#culture-lab\">이디야컬쳐랩</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#notice\">공지사항</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#find-store\">매장찾기</a>\r\n            </li>\r\n          </ul>\r\n          <button\r\n            className=\"resetButton is-close-menu\"\r\n            type=\"button\"\r\n            title=\"메뉴 닫기\"\r\n            aria-label=\"메뉴 닫기\"\r\n            onClick={this.handleClopseMeun}\r\n          >\r\n            <span className=\"close\" aria-hidden=\"true\">\r\n              {\" \"}\r\n              x\r\n            </span>\r\n          </button>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default AppNavigation;\r\n","import \"./AppHeader.scss\";\r\nimport React from \"react\";\r\nimport AppHomeLink from \"../AppHomeLink/AppHomeLink\";\r\nimport AppNavigation from \"../AppNavigation/AppNavigation\";\r\n\r\n// - props 데이터 전달 및 관리\r\n// - className 전달 및 병합 설정\r\n// - 필요에 따라서 컴포넌트 포함하고 있는 특정 요소의 속성을 객체 전달\r\n// - 필요에 따라서 as 별칭을 사용해 다른 요소로 변경해서 렌더링\r\n\r\n// wrapperProps ={{as : \"h2\", className=\"wrapper\", title:\"wrapper\"}}\r\nconst AppHeader = () => {\r\n  return (\r\n    <header className=\"appHeader\">\r\n      <AppHomeLink href=\"/\" title=\"EDIYA COFFEE HOME\" external>\r\n        <span className=\"a11yHidden\" lang=\"en\">\r\n          EDIYA COFFEE\r\n        </span>\r\n      </AppHomeLink>\r\n      <AppNavigation />\r\n    </header>\r\n  );\r\n};\r\nexport default AppHeader;\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport \"./BeverageItem.scss\";\r\nimport React from \"react\";\r\n\r\nconst BeverageItem = () => {\r\n  return (\r\n    <li className=\"beverageList__item\">\r\n      <a\r\n        className=\"beverageList__button\"\r\n        href=\"#\"\r\n        role=\"button\"\r\n        aria-haspopup=\"true\"\r\n        aria-pressed=\"false\"\r\n      >\r\n        <figure>\r\n          <img\r\n            src=\"https://yamoo9.github.io/assets/images/ediya/iced-cherry-blossoms-latte.png\"\r\n            width=\"323\"\r\n            height=\"323\"\r\n            alt=\"\"\r\n          />\r\n          <figcaption>ICED 벚꽃라떼</figcaption>\r\n        </figure>\r\n      </a>\r\n\r\n      <div\r\n        className=\"beverageList__dialog\"\r\n        hidden\r\n        role=\"dialog\"\r\n        aria-modal=\"false\"\r\n        aria-labelledby=\"ediya-menu__item-1\"\r\n      >\r\n        <h3 className=\"beverageList__dialog--name\" id=\"beverageList__dialog-1\">\r\n          ICED 벚꽃라떼<span lang=\"en\">Cherry Blossom Latte</span>\r\n        </h3>\r\n\r\n        <p>은은한 벚꽃향과 라즈베리 화이트 초콜릿 토핑이 올라간 핑크빛 라떼</p>\r\n\r\n        <div className=\"beverageList__dialog--multi-column is-2\">\r\n          <dl>\r\n            <dt>칼로리</dt>\r\n            <dd>(393kcal)</dd>\r\n            <dt>당류</dt>\r\n            <dd>(35g)</dd>\r\n            <dt>단백질</dt>\r\n            <dd>(7g)</dd>\r\n            <dt>포화지방</dt>\r\n            <dd>(18.6g)</dd>\r\n            <dt>나트륨</dt>\r\n            <dd>(149mg)</dd>\r\n            <dt>카페인</dt>\r\n            <dd>(0mg)</dd>\r\n          </dl>\r\n        </div>\r\n\r\n        <button\r\n          className=\"resetButton is-close-dialog\"\r\n          type=\"button\"\r\n          title=\"닫기\"\r\n          aria-label=\"음료 정보 패널 닫기\"\r\n        >\r\n          <span aria-hidden=\"true\">×</span>\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\nexport default BeverageItem;\r\n","import \"./BeverageList.scss\";\r\nimport React from \"react\";\r\nimport BeverageItem from \"../BeverageItem/BeverageItem\";\r\n\r\nconst BeverageList = () => {\r\n  return (\r\n    <ul className=\"beverageList resetList\">\r\n      <BeverageItem />\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default BeverageList;\r\n","import \"./AppMain.scss\";\r\nimport React from \"react\";\r\nimport BeverageList from \"../BeverageList/BeverageList\";\r\n\r\nconst AppMain = () => {\r\n  return (\r\n    <main className=\"appMain\">\r\n      <h2 className=\"a11yHidden\">이디야 음료</h2>\r\n      <BeverageList />\r\n    </main>\r\n  );\r\n};\r\nexport default AppMain;\r\n","import \"./GoToTop.scss\";\r\nimport React from \"react\";\r\n\r\nconst GoToTop = () => {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"resetButton goToTop\"\r\n      aria-label=\"페이지 상단으로 이동\"\r\n    >\r\n      <svg\r\n        viewBox=\"0 0 64 64\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"m32 56c1.104 0 2-.896 2-2v-39.899l14.552 15.278c.393.413.92.621 1.448.621.495 0 .992-.183 1.379-.552.8-.762.831-2.028.069-2.828l-16.619-17.448c-.756-.755-1.76-1.172-2.829-1.172s-2.073.417-2.862 1.207l-16.586 17.414c-.762.8-.731 2.066.069 2.828s2.067.731 2.828-.069l14.551-15.342v39.962c0 1.104.896 2 2 2z\" />\r\n      </svg>\r\n    </button>\r\n  );\r\n};\r\nexport default GoToTop;\r\n","import React, { Fragment } from \"react\";\nimport AppHeader from \"~/components/AppHeader/AppHeader\";\nimport AppMain from \"~/components/AppMain/AppMain\";\nimport GoToTop from \"~/components/GoToTop/GoToTop\";\n\nconst App = (props) => (\n  <Fragment>\n    <AppHeader />\n    <AppMain />\n    <GoToTop />\n  </Fragment>\n);\n\nexport default App;\n","import \"react-app-polyfill/ie11\";\nimport \"styles/index.scss\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"~/App/App\";\n\nReactDOM.render(<App />, document.getElementById(\"reactApp\"));\n\n// 앱을 오프라인에서 작동시키고 보다 빠르게 로드 하고자 한다면?\n// 아래 코드의 unregister()를 register()로 변경합니다.\n// [⚠️주의! 이 방법은 몇 가지 문제를 발생할 수 있습니다.]\n// 서비스 워커에 대해 자세히 알아보기: https://bit.ly/CRA-PWA\nif (process.env.NODE_ENV === \"production\") {\n  import(\"~/config/serviceWorker\").then((serviceWorker) =>\n    serviceWorker.register()\n  );\n}\n"],"sourceRoot":""}